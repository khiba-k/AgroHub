generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["public"]
}

enum FarmRole {
  ADMIN
  MEMBER

  @@schema("public")
}

model Farm {
  id               String   @id @default(uuid()) @db.Uuid
  name             String   @unique
  description      String
  district         String
  country          String
  contactNumber1   String
  contactNumber2   String?
  hasPaymentMethod Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  farmUsers           FarmUser[]
  produceListings     ProduceListing[]
  paymentMethods      PaymentMethod[]
  orderItemBreakdowns OrderItemBreakdown[]

  @@map("farms")
  @@schema("public")
}

model FarmUser {
  id     String   @id @default(uuid()) @db.Uuid
  farmId String   @db.Uuid
  userId String   @db.Uuid
  role   FarmRole @default(MEMBER)

  farm Farm @relation(fields: [farmId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@unique([farmId, userId])
  @@map("farm_users")
  @@schema("public")
}

enum PaymentType {
  EFT
  MPESA
  ECOCASH

  @@schema("public")
}

model PaymentMethod {
  id         String      @id @default(uuid()) @db.Uuid
  farmId     String      @db.Uuid
  type       PaymentType
  isPrimary  Boolean
  isMerchant Boolean? // Only for MPESA / ECOCASH

  // Bank (EFT)
  accountHolder String?
  accountNumber String?
  accountType   String?
  bankName      String?
  branchCode    String?

  // Mobile Money
  merchantName    String?
  merchantNumber  String?
  recipientName   String?
  cellphoneNumber String?

  createdAt DateTime @default(now())

  farm Farm @relation(fields: [farmId], references: [id], onDelete: Cascade)

  @@map("payment_methods")
  @@schema("public")
}

model AgroHubUser {
  id        String   @id @default(uuid()) @db.Uuid
  firstname String   @unique
  lastname  String   @unique
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders Order[]

  @@map("agrohub_users")
  @@schema("public")
}

model PasswordResetToken {
  id        String   @id @default(uuid()) @db.Uuid
  tokenHash String
  email     String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("password_reset_tokens")
  @@schema("public")
}

model InviteToken {
  id        String   @id @default(uuid()) @db.Uuid
  tokenHash String
  email     String
  senderId  String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("invite_tokens")
  @@schema("public")
}

model Produce {
  id           String   @id @default(uuid()) @db.Uuid
  category     String
  name         String
  type         String?
  unitType     String
  pricePerUnit String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  listings   ProduceListing[]
  orderItems OrderItem[]

  @@map("produce")
  @@schema("public")
}

// Master listing record - persists through all states
model ProduceListing {
  id          String   @id @default(uuid()) @db.Uuid
  location    String? // Make nullable
  description String? // Make nullable  
  quantity    Int? // Make nullable
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  produceId String  @db.Uuid
  produce   Produce @relation(fields: [produceId], references: [id])

  farmId String @db.Uuid
  farm   Farm   @relation(fields: [farmId], references: [id])

  // Status-specific relations
  activeDraftListing ActiveDraftListing? // One-to-One: Can only be in one active/draft state
  harvestListings    HarvestListing[] // One-to-Many: Multiple harvest batches
  soldListings       SoldListing[] // One-to-Many: Partial sales to different buyers

  images ListingImg[]

  orderItemBreakdowns OrderItemBreakdown[]

  @@map("produce_listings")
  @@schema("public")
}

model ListingImg {
  id        String   @id @default(uuid()) @db.Uuid
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  listingId String         @db.Uuid
  listing   ProduceListing @relation(fields: [listingId], references: [id])

  @@map("listing_imgs")
  @@schema("public")
}

enum ActiveDraftStatus {
  active
  draft

  @@schema("public")
}

// Active/Draft status details
model ActiveDraftListing {
  id     String            @id @default(uuid()) @db.Uuid
  status ActiveDraftStatus

  // Any active/draft specific fields
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  listingId String         @unique @db.Uuid
  listing   ProduceListing @relation(fields: [listingId], references: [id])

  @@map("active_draft_listings")
  @@schema("public")
}

// Harvest status details
model HarvestListing {
  id          String   @id @default(uuid()) @db.Uuid
  harvestDate DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  listingId String         @unique @db.Uuid // ✅ Add @unique here
  listing   ProduceListing @relation(fields: [listingId], references: [id])

  @@map("harvest_listings")
  @@schema("public")
}

//Order Related Tables

// Sold status details
model SoldListing {
  id           String   @id @default(uuid()) @db.Uuid
  soldPrice    Int // use Int for adding up — or Decimal if you want cents
  soldQuantity Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  listingId String         @unique @db.Uuid // ✅ unique: 1:1 with ProduceListing
  listing   ProduceListing @relation(fields: [listingId], references: [id])

  @@map("sold_listings")
  @@schema("public")
}

model Order {
  id          String      @id @default(uuid()) @db.Uuid
  orderNumber Int         @unique // 4/5 digit sequential
  buyerId     String      @db.Uuid
  buyer       AgroHubUser @relation(fields: [buyerId], references: [id])
  totalPrice  Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  items OrderItem[]

  @@map("orders")
  @@schema("public")
}

model OrderItem {
  id            String   @id @default(uuid()) @db.Uuid
  orderId       String   @db.Uuid
  produceId     String   @db.Uuid
  produce       Produce  @relation(fields: [produceId], references: [id])
  unitType      String
  totalQuantity Int
  totalPrice    Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  order      Order                @relation(fields: [orderId], references: [id])
  breakdowns OrderItemBreakdown[]

  @@map("order_items")
  @@schema("public")
}

model OrderItemBreakdown {
  id String @id @default(uuid()) @db.Uuid

  orderItemId String    @db.Uuid
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id])

  produceListingId String         @db.Uuid
  produceListing   ProduceListing @relation(fields: [produceListingId], references: [id])

  farmId String @db.Uuid
  farm   Farm   @relation(fields: [farmId], references: [id])

  quantity Int
  price    Int

  // Main AgroHub-side status flow
  status BreakdownStatus @default(PROCESSING)

  // Farmer-specific actions
  farmerConfirmed Boolean @default(false)
  farmerShipped   Boolean @default(false)

  // AgroHub-specific actions
  agrohubShipped Boolean @default(false)

  // Final delivery mark (AgroHub only)
  delivered Boolean @default(false)

  // Cancellations
  cancelledBy OrderParty?

  // Files
  paymentProofUrl String? // AgroHub uploads payment proof PDF here
  invoiceUrl      String? // Farmer uploads invoice PDF here

  farmerConfirmsPayment  Boolean @default(false)
  agrohubConfirmsPayment Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_item_breakdowns")
  @@schema("public")
}

enum BreakdownStatus {
  PROCESSING // Set by AgroHub when order starts
  READY_FOR_PICKUP // Set by AgroHub after farmer confirms

  @@schema("public")
}

enum OrderParty {
  AGROHUB
  FARMER

  @@schema("public")
}
